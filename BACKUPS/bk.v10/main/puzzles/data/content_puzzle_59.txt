________________________________
$LEFTPANEL_HEADING$
Adam's Song
https://open.spotify.com/track/43NhiKnrtGqztxDqXrcUux
________________________________
$LEFTPANEL_INSTRUCTIONS$
________________________________
$LEFTPANEL_QUESTION$
Update your palindrome function to <def>isStringPalindrome</def>(), which now also accepts phrase palindromes such as "Madam, I'm Adam", or "My gym." 
For this function, numbers, punctuation, capitalization, and spacing should be ignored. The input is a ^str^, and the output is a ^bool^.
________________________________
$LEFTPANEL_EDITOR$
def isStringPalindrome(input_string):
________________________________
$LEFTPANEL_HINTS$
As a first step, iterate through the input ^str^ and remove any non-alphabetic characters.
________________________________
$RIGHTPANEL_QUESTIONS$
How would you extend your function to also handle ^int^ inputs, for example 12321?
________________________________
$RIGHTPANEL_TESTCASES$
Much of your code from the previous square can be re-used here.
________________________________
$ALLPANES_SUBMITCASES$
print ""
print "INPUT     | 'Madam, I'm Adam'"
print "OUTPUT    |", isStringPalindrome("Madam, I'm Adam")
print "EXPECTED  | True"
if isStringPalindrome("Madam, I'm Adam") == True:
	print "PASSED!"
else: 
	print "FAILED"

print ""
print "INPUT     | 'No lemon, no melon'"
print "OUTPUT    |", isStringPalindrome("No lemon, no melon")
print "EXPECTED  | True"
if isStringPalindrome("No lemon, no melon") == True:
	print "PASSED!"
else: 
	print "FAILED"

print ""
print "INPUT     | 'Revolver'"
print "OUTPUT    |", isStringPalindrome("Revolver")
print "EXPECTED  | False"
if isStringPalindrome("Revolver") == False:
	print "PASSED!"
else: 
	print "FAILED"

print ""
print "INPUT     | 'Not a palindrome'"
print "OUTPUT    |", isStringPalindrome("Not a palindrome")
print "EXPECTED  | False"
if isStringPalindrome("Not a palindrome") == False:
	print "PASSED!"
else: 
	print "FAILED"
________________________________
$RIGHTPANEL_SPONSORED$
________________________________
FIN