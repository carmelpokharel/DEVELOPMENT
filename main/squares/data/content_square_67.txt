________________________________
$LEFTPANEL_HEADING$
Right Where We Left Off
https://open.spotify.com/track/0d85V25YIcdoms6vwLO7r7
________________________________
$LEFTPANEL_INSTRUCTIONS$
A <a href="https://en.wikipedia.org/wiki/Population_pyramid" target="_blank">population pyramid</a> is a type of graph consisting of back-to-back histograms. Its purpose is to display the composition of genders in a sample population, broken down by age group.
________________________________
$LEFTPANEL_QUESTION$
Define a function, <def>populationPyramid</def>(), which takes in two ^list^ datatypes, and returns a population pyramid. The left and right portions of your graph should be separated by a pipe ('|') character. You may assume that both your ^list^ inputs will always by equal in length.

For example, ^print^ <def>populationPyramid</def>([4, 9, 7], [5, 3, 9]) should display the following in the Output box:
<outputcodeline>
<code><tab><1sp>****|*****</code>
<code>*********|***</code>
<code><2sp>*******|*********</code>
</outputcodeline>

Once again, your function should ^return^ a single ^str^, and not use any ^print^ statements in the function body.
________________________________
$LEFTPANEL_EDITOR$
def populationPyramid(first_list, second_list):
________________________________
$LEFTPANEL_HINTS$
Can you reuse any of your code from the previous two squares?
________________________________
$RIGHTPANEL_QUESTIONS$
How are you ensuring that your pipe character is always in the middle of your rows?
________________________________
$RIGHTPANEL_TESTCASES$
This square does not have a Submit button, as the results are self-explanatory. However, make sure to test your function on the following inputs:
<cardcodeblock>
test1 = [4,9,7], [0,0,0]
test2 = [2,2,0,5], [0,10,20,1]
</cardcodeblock>
________________________________
$RIGHTPANEL_SPONSORED$
________________________________
$RIGHTPANEL_SOLUTION$
def populationPyramid(first_list, second_list):
    biggest_num = max(first_list)
    answer = ''
    counter = 0
    for num in first_list:
        answer += (' ' * (biggest_num - num)) + ('*' * num) + '|' + ('*' * second_list[counter]) + '\n'
        counter += 1
    return answer
________________________________
FIN